type Client {
    id: ID
    name: String
    lastname: String
    enterprise: String
    emails: [Email]
    age: Int
    category: CategoryClient
}

type Product {
    id: ID
    name: String!
    price: Int
    stock: Int
}

type Pedido {
    id: ID
    pedido: [PedidoProducto]
    total: Int
    fecha: String
    cliente: ID
    estado: EstadoPedidos
}

type PedidoProducto{
    id: ID
    cantidad: Int
}

type Email {
    email: String
}

enum CategoryClient{
    BASICO
    PREMIUM
}
type Query {
    getClients(limit: Int, offset: Int): [Client]
    getClient(id:ID): Client
    totalClients : String

    #Productos

    getProducts(limit: Int, offset: Int, stock: Boolean): [Product]
    getProduct(id: ID) : Product
    totalProducts : String
}

input EmailInput{
    email: String
}
input ClientInput {
    id: ID
    name: String!
    lastname: String!
    enterprise: String!
    emails: [EmailInput]
    age: Int!
    category: CategoryClient!
}

input ProductInput {
    id: ID
    name: String!
    price: Int
    stock: Int
}
enum EstadoPedidos {
    PENDIENTE
    CANCELADO
    APROBADO
}

input PedidoInput {
    id: ID
    pedido: [PedidoProductoInput]
    total: Int
    fecha: String
    cliente: ID
    estado: EstadoPedidos
}

input PedidoProductoInput{
    id: ID
    cantidad: Int
}


type Mutation{
    newClient(input: ClientInput) : Client
    updateClient(input: ClientInput) : Client
    deleteClient(id : ID!) : String

    newProduct(input: ProductInput) : Product
    updateProduct(input: ProductInput) : Product
    deleteProduct(id: ID) : String

    nuevoPedido(input: PedidoInput) : Pedido
}